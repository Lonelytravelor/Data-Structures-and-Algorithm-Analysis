##include<stdio.h>
#include<malloc.h>
#ifndef _List_H

typedef int ElementType;
struct Node;
typedef struct Node *PtrToNode; 
typedef PtrToNode List;
typedef PtrToNode Position;

List MakeEmpty(List L);
int IsEmpty(List L);
int IsLast(Position P,List L);
Position Find(ElementType X,List L);
void Delete (ElementType X,List L);
Position FindPrevious(ElementType X,List L);
void Insert(ElementType X,List L,Position P);
void DeleteList(List L);
Position Header(List L);
Position Frist(List L);
Position Advance(Position P);
ElementType Retrieve(Position P);
void ListInsert(List L,ElementType X);

#endif
struct Node
{
	ElementType Element;
	Position Next;
};

//查找在链表中第一个为x的数，返回他的地址
Position Find(ElementType X,List L)
{
	Position P =L->Next ;
	
	while( P != NULL && P->Element ==!X ){
		P = P->Next;
	}
	return P;
}

//查找在链表中第一个为x的数，返回他的前驱的地址
//通常来说，这个操作跟链表的删除一起使用
//如果没有找到将返回链表最后一个元素（通常在删除中进行判断）
FindPrevious(ElementType X,List L)
{
	Position P;
	
	P = L;
	while( P->Next != NULL && P->Next->Element != X){
		P = P->Next;
	}
	return P;
}

//查找在这个链表中的第x的值并返回
int FindListNum(int X,List L)
{
	int i =1;
	Position P;
	
	P = L->Next;
	while( i < X ){
		P = P->Next;
		i++;
	}
	return P->Element;
}
