/*一颗平衡树*/ 
#include<stdio.h>
struct AvlNode;
typedef struct AvlNode *Position;
typedef struct AvlNode *AvlTree;

struct AvlNode
{
	int data;
	int Height;
	AvlTree Left;
	AvlTree Right;
}

int Height ( Position P )
{
	if( P == NULL ){
		return -1;
	}else{
		return P->Height;	
	}
}

AvlTree Insert( int data, AvlTree T ){
	if ( T == NULL ){
		 T = (AvlTree)malloc(sizeof(struct AvlNode));
		 if( T == NULL){
		 	printf("申请失败哦~"); 
		 }else{
		 	T->data = data;
		 	T->Height = 0;
		 	T->Left = T->Right = NULL;
		 }
	}else
	 if(data < T->data){
		T->Left = Insert( data , T->Left);
		if( Height( T->Left) - Height( T->Right) == 2){
			if( data <T->Left->data ){
				T = SingleRotateWithLeft( T );
			}else{
				T = DoubleRotateWithLeft( T );
			}
	}else 
	if(data > T->data){
		T->Right = Insert(data,T->Right);
		if( Height( T->Right) - Height( T->Left) == 2){
			if( data > T->Left->data ){
				T = SingleRotateWithRight( T );
			}else{
				T = DoubleRotateWithRight( T );
			}
		}
	}
	T->data = Max( Height(T->Left),Height(T->Right)) + 1;
	return T; 
}

Position SingleRotateWithLeft ( Position K2){
	Position K1;
	K1 = K2->Left;
	K2->Left = K1->Left;
	K1->Right = K2;
	
	K2->Height = Max(Height( K2->Left),Height( K2->Right))+1;
	K1->Height = Max(Height( K1->Left),Height( K1->Right))+1;
}

Position DoubleRotateWithLeft( Position K3){
	K3 = SingleRotateWithRight( K3->Right );
	return SingleRotateWithLeft ( K3 );
}
