struct Node;
typedef struct Node *PtrToNode;
typedef PtrToNode Position;
typedef PtrToNode List;

struct Node{
	int data;
	Position Next;
};


//在链表的末尾插入
void ListInsert(int data , List L)
{
	Position k,j;
	k = (List)malloc(sizeof(List)); 
	printf("List sizeof %d\n",sizeof(Position));
	k->data = data;
	k->Next = NULL;
	if (L->Next == NULL){
		L->Next = k;
	}
	else
	{
		j = L->Next;
		while(j->Next != NULL){
			j = j->Next;
		}
		j->Next = k;
	}
 } 
 
//在指定个数位添加
//不足之处：插入的位置大于链表总数，将会陷入死循环
//方法：在这个函数中调用一个获取链表的大小的函数，在进行循环之前先进行判断插入的位置是否在链表中
 void ListInsertNum(int data,int num,List L){
 	int i =2;
 	Position P,J;
 	J = L->Next;
 	P = (List)malloc(sizeof(struct Node));
 	P->Next =NULL;
 	P->data = data;
 	while(i != num){
 		J = J->Next;
	 }
	 P->Next = J->Next;
	 J->Next = P;
 } 
 
 //在指定地址插入节点
//？？？在列表头地址插入可以插入第一个节点（值）
//因为在链表中第一个header是没有值的，第一个值的位置是在L->next
//故，如果想将数据插到第一个位置应该将L->next（第一个值）的地址赋给新申请的空间的地址位置
//使得k指向第一个元素
//再使header指向新节点
void ListInsertPos(int data,Linklist P,Linklist L)
 {
 	Linklist K;
 	K = (Linklist)malloc(sizeof(struct LNode));
 	K->next = NULL;
 	K->data = data;
 	
 	K->next = P->next;//不应该是插入第二个位置么
 	P->next = K;		//或者是K->next = P;P=K;
 }
