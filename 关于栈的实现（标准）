#include<stdio.h>
#include<malloc.h>
struct Node;
typedef struct Node *PtrToNode;
typedef PtrToNode Stack;
 
struct Node
{
	int data;
	PtrToNode Next;
};
int Isempty( Stack S );
void MakeEmpty( Stack S );
Stack CreateStack (void);
void Push(int data,Stack S );
int Top(Stack S);
void Pop(Stack S); 
 
int Isempty( Stack S )
{
	return S->Next == NULL;
}

void MakeEmpty( Stack S )
{
	if( S == NULL ){
		printf("Must use create frist");
	}
	else{
		while(!Isempty(S)){
			Pop( S );
		}
	}
}

Stack CreateStack (void)
{
	Stack S;
	S = malloc(sizeof(struct Node));
	if(S == NULL ){
		printf("Out Of Space!");
	}
	S->Next =NULL;
	MakeEmpty(S);
	return S;
}

void Push(int data,Stack S )
{
	PtrToNode Tmp;
	Tmp = (PtrToNode)malloc(sizeof(struct Node));
	if( Tmp == NULL){
		printf("NULL");
	}
	else{
		Tmp->data = data;
		Tmp->Next = S->Next;
		S->Next = Tmp;
	}
}

int Top(Stack S)
{
	if( !Isempty( S )){
		return S->Next->data;
	}
	else
	{
		printf("ERROE!\n");
		return -1; 
	}
}

void Pop(Stack S)
{
	PtrToNode FristCell;
	
	if( Isempty( S )){
		printf("Empty Stack!");
	}else
	{
		FristCell = S->Next;
		S->Next = S->Next->Next;
		free(FristCell);
	}
}

int main()
{
	PtrToNode S;
	S = CreateStack();
	Push(1,S);
	Push(2,S);
	Push(3,S);
	Push(4,S);
	Push(5,S);
	printf("%d\n",Top(S));
	Pop(S);
	printf("%d\n",Top(S));
	Pop(S);
	printf("%d\n",Top(S));
	Pop(S);
	printf("%d\n",Top(S));
	Pop(S);
	printf("%d\n",Top(S));
	Pop(S);
	printf("%d\n",Top(S));
	Pop(S);
	return 0;
}
